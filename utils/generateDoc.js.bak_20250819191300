const fs = require('fs');
const path = require('path');
const PizZip = require('pizzip');
const Docxtemplater = require('docxtemplater');

// Optional project logger
let logger = console;
try { logger = require('../logger'); } catch (e) { /* fallback */ }

const TEMPLATES_DIR = path.join(__dirname, '..', 'templates');

function generateDocBuffer(templateName, data = {}) {
  const templatePath = path.join(TEMPLATES_DIR, templateName);
  if (!fs.existsSync(templatePath)) {
    const msg = `Template not found: ${templatePath}`;
    (logger && logger.error) ? logger.error(msg) : console.error(msg);
    throw new Error(msg);
  }
  const content = fs.readFileSync(templatePath, 'binary');
  const zip = new PizZip(content);
  const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });
  doc.setData(data);
  try {
    doc.render();
  } catch (err) {
    (logger && logger.error) ? logger.error('Docxtemplater render error', err) : console.error(err);
    throw err;
  }
  return doc.getZip().generate({ type: 'nodebuffer' });
}

module.exports = { generateDocBuffer, TEMPLATES_DIR };
